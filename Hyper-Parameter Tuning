!pip install -q -U keras-tuner

import kerastuner as kt

def model_builder(hp):

  # Hyper-parameter placeholders:
  hp_units = hp.Int('units_layer', min_value = 128, max_value = 512, step = 64)
  hp_learningrate = hp.Float('learning_rate', min_value=1e-4, max_value=1e-2, sampling='log')
  hp_dropout_rate = hp.Float('dropout_layer', min_value = 0.2, max_value = 0.5, step = 0.1)
  hp_activation = hp.Choice('activation', values=('relu', 'sigmoid', 'tanh'))

  
  model = tf.keras.Sequential([
      tf.keras.layers.Flatten(input_shape=(28, 28)),
      tf.keras.layers.Dense(hp_units, activation= hp_activation, kernel_initializer=tf.keras.initializers.he_normal(seed=1), kernel_regularizer=tf.keras.regularizers.l2(0.0001)),
      tf.keras.layers.Dropout(hp_dropout_rate),
      tf.keras.layers.Dense(hp_units, activation= hp_activation, kernel_initializer=tf.keras.initializers.he_normal(seed=1), kernel_regularizer=tf.keras.regularizers.l2(0.0001)),
      tf.keras.layers.Dropout(hp_dropout_rate),
      tf.keras.layers.Dense(hp_units, activation= hp_activation, kernel_initializer=tf.keras.initializers.he_normal(seed=1), kernel_regularizer=tf.keras.regularizers.l2(0.0001)),
      tf.keras.layers.Dropout(hp_dropout_rate),
      tf.keras.layers.Dense(10)
  ])

  lr_schedule = tf.keras.optimizers.schedules.ExponentialDecay(initial_learning_rate= hp_learningrate, decay_steps=1000, decay_rate=0.9)

  opt = tf.keras.optimizers.SGD(learning_rate=lr_schedule, momentum=0.98, nesterov=True)

  model.compile(optimizer=opt,
                loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
                metrics=['accuracy'])
  
  return model
#Introducing the Tuner
# Initialization
tuner = kt.Hyperband(model_builder,
                     objective = 'val_accuracy', 
                     max_epochs = 30,
                     factor = 3,
                     directory = 'kerastuner',
                     project_name = 'FashionMNIST')
                     
# Early Stopping
callback = tf.keras.callbacks.EarlyStopping(monitor= 'val_accuracy', patience=5, min_delta=1e-4, restore_best_weights=True)

# Beginning Tuning
tuner.search(train_images, train_labels,
            validation_data = (validation_images, validation_labels),
            epochs = 30,
            callbacks=[callback],
            verbose = 1)
